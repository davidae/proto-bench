// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structdef-gogo-v1.proto

package protobench

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TypeGoGoV1 int32

const (
	TypeGoGoV1_TYPEGOGOV1_UNSPECIFIED TypeGoGoV1 = 0
	TypeGoGoV1_TYPEGOGOV1_R           TypeGoGoV1 = 1
	TypeGoGoV1_TYPEGOGOV1_S           TypeGoGoV1 = 2
)

var TypeGoGoV1_name = map[int32]string{
	0: "TYPEGOGOV1_UNSPECIFIED",
	1: "TYPEGOGOV1_R",
	2: "TYPEGOGOV1_S",
}

var TypeGoGoV1_value = map[string]int32{
	"TYPEGOGOV1_UNSPECIFIED": 0,
	"TYPEGOGOV1_R":           1,
	"TYPEGOGOV1_S":           2,
}

func (x TypeGoGoV1) String() string {
	return proto.EnumName(TypeGoGoV1_name, int32(x))
}

func (TypeGoGoV1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9d837b81e69b7b4, []int{0}
}

type GogoV1 struct {
	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BirthDay int64      `protobuf:"varint,2,opt,name=birthDay,proto3" json:"birthDay,omitempty"`
	Phone    string     `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Siblings int32      `protobuf:"varint,4,opt,name=siblings,proto3" json:"siblings,omitempty"`
	Spouse   bool       `protobuf:"varint,5,opt,name=spouse,proto3" json:"spouse,omitempty"`
	Money    float64    `protobuf:"fixed64,6,opt,name=money,proto3" json:"money,omitempty"`
	Type     TypeGoGoV1 `protobuf:"varint,7,opt,name=type,proto3,enum=protobench.TypeGoGoV1" json:"type,omitempty"`
	// Types that are valid to be assigned to Values:
	//	*GogoV1_ValueS
	//	*GogoV1_ValueI
	//	*GogoV1_ValueD
	Values  isGogoV1_Values `protobuf_oneof:"values"`
	Address *AddressGoGoV1  `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GogoV1) Reset()         { *m = GogoV1{} }
func (m *GogoV1) String() string { return proto.CompactTextString(m) }
func (*GogoV1) ProtoMessage()    {}
func (*GogoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d837b81e69b7b4, []int{0}
}
func (m *GogoV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GogoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GogoV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GogoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GogoV1.Merge(m, src)
}
func (m *GogoV1) XXX_Size() int {
	return m.Size()
}
func (m *GogoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_GogoV1.DiscardUnknown(m)
}

var xxx_messageInfo_GogoV1 proto.InternalMessageInfo

type isGogoV1_Values interface {
	isGogoV1_Values()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GogoV1_ValueS struct {
	ValueS string `protobuf:"bytes,8,opt,name=value_s,json=valueS,proto3,oneof" json:"value_s,omitempty"`
}
type GogoV1_ValueI struct {
	ValueI int32 `protobuf:"varint,9,opt,name=value_i,json=valueI,proto3,oneof" json:"value_i,omitempty"`
}
type GogoV1_ValueD struct {
	ValueD float64 `protobuf:"fixed64,10,opt,name=value_d,json=valueD,proto3,oneof" json:"value_d,omitempty"`
}

func (*GogoV1_ValueS) isGogoV1_Values() {}
func (*GogoV1_ValueI) isGogoV1_Values() {}
func (*GogoV1_ValueD) isGogoV1_Values() {}

func (m *GogoV1) GetValues() isGogoV1_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *GogoV1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GogoV1) GetBirthDay() int64 {
	if m != nil {
		return m.BirthDay
	}
	return 0
}

func (m *GogoV1) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GogoV1) GetSiblings() int32 {
	if m != nil {
		return m.Siblings
	}
	return 0
}

func (m *GogoV1) GetSpouse() bool {
	if m != nil {
		return m.Spouse
	}
	return false
}

func (m *GogoV1) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *GogoV1) GetType() TypeGoGoV1 {
	if m != nil {
		return m.Type
	}
	return TypeGoGoV1_TYPEGOGOV1_UNSPECIFIED
}

func (m *GogoV1) GetValueS() string {
	if x, ok := m.GetValues().(*GogoV1_ValueS); ok {
		return x.ValueS
	}
	return ""
}

func (m *GogoV1) GetValueI() int32 {
	if x, ok := m.GetValues().(*GogoV1_ValueI); ok {
		return x.ValueI
	}
	return 0
}

func (m *GogoV1) GetValueD() float64 {
	if x, ok := m.GetValues().(*GogoV1_ValueD); ok {
		return x.ValueD
	}
	return 0
}

func (m *GogoV1) GetAddress() *AddressGoGoV1 {
	if m != nil {
		return m.Address
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GogoV1) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GogoV1_ValueS)(nil),
		(*GogoV1_ValueI)(nil),
		(*GogoV1_ValueD)(nil),
	}
}

type AddressGoGoV1 struct {
	Street   string        `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	Number   int32         `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	PostCode int32         `protobuf:"varint,3,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Floor    int32         `protobuf:"varint,4,opt,name=floor,proto3" json:"floor,omitempty"`
	Random   *RandomGoGoV1 `protobuf:"bytes,5,opt,name=random,proto3" json:"random,omitempty"`
}

func (m *AddressGoGoV1) Reset()         { *m = AddressGoGoV1{} }
func (m *AddressGoGoV1) String() string { return proto.CompactTextString(m) }
func (*AddressGoGoV1) ProtoMessage()    {}
func (*AddressGoGoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d837b81e69b7b4, []int{1}
}
func (m *AddressGoGoV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressGoGoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressGoGoV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressGoGoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressGoGoV1.Merge(m, src)
}
func (m *AddressGoGoV1) XXX_Size() int {
	return m.Size()
}
func (m *AddressGoGoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressGoGoV1.DiscardUnknown(m)
}

var xxx_messageInfo_AddressGoGoV1 proto.InternalMessageInfo

func (m *AddressGoGoV1) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *AddressGoGoV1) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *AddressGoGoV1) GetPostCode() int32 {
	if m != nil {
		return m.PostCode
	}
	return 0
}

func (m *AddressGoGoV1) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *AddressGoGoV1) GetRandom() *RandomGoGoV1 {
	if m != nil {
		return m.Random
	}
	return nil
}

type RandomGoGoV1 struct {
	FieldA       string              `protobuf:"bytes,1,opt,name=FieldA,proto3" json:"FieldA,omitempty"`
	FieldB       string              `protobuf:"bytes,2,opt,name=FieldB,proto3" json:"FieldB,omitempty"`
	FieldC       string              `protobuf:"bytes,3,opt,name=FieldC,proto3" json:"FieldC,omitempty"`
	FieldD       string              `protobuf:"bytes,4,opt,name=FieldD,proto3" json:"FieldD,omitempty"`
	FieldE       string              `protobuf:"bytes,5,opt,name=FieldE,proto3" json:"FieldE,omitempty"`
	FieldF       string              `protobuf:"bytes,6,opt,name=FieldF,proto3" json:"FieldF,omitempty"`
	FielG        string              `protobuf:"bytes,7,opt,name=FielG,proto3" json:"FielG,omitempty"`
	FieldH       string              `protobuf:"bytes,8,opt,name=FieldH,proto3" json:"FieldH,omitempty"`
	FieldI       string              `protobuf:"bytes,9,opt,name=FieldI,proto3" json:"FieldI,omitempty"`
	FieldJ       string              `protobuf:"bytes,10,opt,name=FieldJ,proto3" json:"FieldJ,omitempty"`
	FieldK       int64               `protobuf:"varint,11,opt,name=FieldK,proto3" json:"FieldK,omitempty"`
	FieldL       int64               `protobuf:"varint,12,opt,name=FieldL,proto3" json:"FieldL,omitempty"`
	FieldM       int64               `protobuf:"varint,13,opt,name=FieldM,proto3" json:"FieldM,omitempty"`
	FieldN       int64               `protobuf:"varint,14,opt,name=FieldN,proto3" json:"FieldN,omitempty"`
	FieldO       string              `protobuf:"bytes,15,opt,name=FieldO,proto3" json:"FieldO,omitempty"`
	FieldP       string              `protobuf:"bytes,16,opt,name=FieldP,proto3" json:"FieldP,omitempty"`
	FieldQ       int32               `protobuf:"varint,17,opt,name=FieldQ,proto3" json:"FieldQ,omitempty"`
	FieldR       string              `protobuf:"bytes,18,opt,name=FieldR,proto3" json:"FieldR,omitempty"`
	FieldS       string              `protobuf:"bytes,19,opt,name=FieldS,proto3" json:"FieldS,omitempty"`
	FieldT       string              `protobuf:"bytes,20,opt,name=FieldT,proto3" json:"FieldT,omitempty"`
	FieldU       int32               `protobuf:"varint,21,opt,name=FieldU,proto3" json:"FieldU,omitempty"`
	FieldV       int32               `protobuf:"varint,22,opt,name=FieldV,proto3" json:"FieldV,omitempty"`
	FieldW       int32               `protobuf:"varint,23,opt,name=FieldW,proto3" json:"FieldW,omitempty"`
	FieldX       int32               `protobuf:"varint,24,opt,name=FieldX,proto3" json:"FieldX,omitempty"`
	FieldY       string              `protobuf:"bytes,25,opt,name=FieldY,proto3" json:"FieldY,omitempty"`
	FieldZ       bool                `protobuf:"varint,26,opt,name=FieldZ,proto3" json:"FieldZ,omitempty"`
	NestedRandom *NestedRandomGoGoV1 `protobuf:"bytes,34,opt,name=nested_random,json=nestedRandom,proto3" json:"nested_random,omitempty"`
}

func (m *RandomGoGoV1) Reset()         { *m = RandomGoGoV1{} }
func (m *RandomGoGoV1) String() string { return proto.CompactTextString(m) }
func (*RandomGoGoV1) ProtoMessage()    {}
func (*RandomGoGoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d837b81e69b7b4, []int{2}
}
func (m *RandomGoGoV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandomGoGoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandomGoGoV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandomGoGoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomGoGoV1.Merge(m, src)
}
func (m *RandomGoGoV1) XXX_Size() int {
	return m.Size()
}
func (m *RandomGoGoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomGoGoV1.DiscardUnknown(m)
}

var xxx_messageInfo_RandomGoGoV1 proto.InternalMessageInfo

func (m *RandomGoGoV1) GetFieldA() string {
	if m != nil {
		return m.FieldA
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldB() string {
	if m != nil {
		return m.FieldB
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldC() string {
	if m != nil {
		return m.FieldC
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldD() string {
	if m != nil {
		return m.FieldD
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldE() string {
	if m != nil {
		return m.FieldE
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldF() string {
	if m != nil {
		return m.FieldF
	}
	return ""
}

func (m *RandomGoGoV1) GetFielG() string {
	if m != nil {
		return m.FielG
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldH() string {
	if m != nil {
		return m.FieldH
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldI() string {
	if m != nil {
		return m.FieldI
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldJ() string {
	if m != nil {
		return m.FieldJ
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldK() int64 {
	if m != nil {
		return m.FieldK
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldL() int64 {
	if m != nil {
		return m.FieldL
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldM() int64 {
	if m != nil {
		return m.FieldM
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldN() int64 {
	if m != nil {
		return m.FieldN
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldO() string {
	if m != nil {
		return m.FieldO
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldP() string {
	if m != nil {
		return m.FieldP
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldQ() int32 {
	if m != nil {
		return m.FieldQ
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldR() string {
	if m != nil {
		return m.FieldR
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldS() string {
	if m != nil {
		return m.FieldS
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldT() string {
	if m != nil {
		return m.FieldT
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldU() int32 {
	if m != nil {
		return m.FieldU
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldV() int32 {
	if m != nil {
		return m.FieldV
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldW() int32 {
	if m != nil {
		return m.FieldW
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldX() int32 {
	if m != nil {
		return m.FieldX
	}
	return 0
}

func (m *RandomGoGoV1) GetFieldY() string {
	if m != nil {
		return m.FieldY
	}
	return ""
}

func (m *RandomGoGoV1) GetFieldZ() bool {
	if m != nil {
		return m.FieldZ
	}
	return false
}

func (m *RandomGoGoV1) GetNestedRandom() *NestedRandomGoGoV1 {
	if m != nil {
		return m.NestedRandom
	}
	return nil
}

type NestedRandomGoGoV1 struct {
	FieldA string  `protobuf:"bytes,1,opt,name=FieldA,proto3" json:"FieldA,omitempty"`
	FieldB string  `protobuf:"bytes,2,opt,name=FieldB,proto3" json:"FieldB,omitempty"`
	FieldC string  `protobuf:"bytes,3,opt,name=FieldC,proto3" json:"FieldC,omitempty"`
	FieldD string  `protobuf:"bytes,4,opt,name=FieldD,proto3" json:"FieldD,omitempty"`
	FieldE string  `protobuf:"bytes,5,opt,name=FieldE,proto3" json:"FieldE,omitempty"`
	FieldF string  `protobuf:"bytes,6,opt,name=FieldF,proto3" json:"FieldF,omitempty"`
	FielG  float64 `protobuf:"fixed64,7,opt,name=FielG,proto3" json:"FielG,omitempty"`
	FieldH float64 `protobuf:"fixed64,8,opt,name=FieldH,proto3" json:"FieldH,omitempty"`
	FieldI float64 `protobuf:"fixed64,9,opt,name=FieldI,proto3" json:"FieldI,omitempty"`
	FieldJ float64 `protobuf:"fixed64,10,opt,name=FieldJ,proto3" json:"FieldJ,omitempty"`
	FieldK float64 `protobuf:"fixed64,11,opt,name=FieldK,proto3" json:"FieldK,omitempty"`
	FieldL float64 `protobuf:"fixed64,12,opt,name=FieldL,proto3" json:"FieldL,omitempty"`
	FieldM string  `protobuf:"bytes,13,opt,name=FieldM,proto3" json:"FieldM,omitempty"`
	FieldN string  `protobuf:"bytes,14,opt,name=FieldN,proto3" json:"FieldN,omitempty"`
	FieldO string  `protobuf:"bytes,15,opt,name=FieldO,proto3" json:"FieldO,omitempty"`
	FieldP string  `protobuf:"bytes,16,opt,name=FieldP,proto3" json:"FieldP,omitempty"`
	FieldQ int64   `protobuf:"varint,17,opt,name=FieldQ,proto3" json:"FieldQ,omitempty"`
	FieldR int64   `protobuf:"varint,18,opt,name=FieldR,proto3" json:"FieldR,omitempty"`
	FieldS int64   `protobuf:"varint,19,opt,name=FieldS,proto3" json:"FieldS,omitempty"`
	FieldT int64   `protobuf:"varint,20,opt,name=FieldT,proto3" json:"FieldT,omitempty"`
	FieldU string  `protobuf:"bytes,21,opt,name=FieldU,proto3" json:"FieldU,omitempty"`
	FieldV string  `protobuf:"bytes,22,opt,name=FieldV,proto3" json:"FieldV,omitempty"`
	FieldW string  `protobuf:"bytes,23,opt,name=FieldW,proto3" json:"FieldW,omitempty"`
	FieldX string  `protobuf:"bytes,24,opt,name=FieldX,proto3" json:"FieldX,omitempty"`
	FieldY bool    `protobuf:"varint,25,opt,name=FieldY,proto3" json:"FieldY,omitempty"`
	FieldZ bool    `protobuf:"varint,26,opt,name=FieldZ,proto3" json:"FieldZ,omitempty"`
}

func (m *NestedRandomGoGoV1) Reset()         { *m = NestedRandomGoGoV1{} }
func (m *NestedRandomGoGoV1) String() string { return proto.CompactTextString(m) }
func (*NestedRandomGoGoV1) ProtoMessage()    {}
func (*NestedRandomGoGoV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9d837b81e69b7b4, []int{3}
}
func (m *NestedRandomGoGoV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedRandomGoGoV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedRandomGoGoV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedRandomGoGoV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedRandomGoGoV1.Merge(m, src)
}
func (m *NestedRandomGoGoV1) XXX_Size() int {
	return m.Size()
}
func (m *NestedRandomGoGoV1) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedRandomGoGoV1.DiscardUnknown(m)
}

var xxx_messageInfo_NestedRandomGoGoV1 proto.InternalMessageInfo

func (m *NestedRandomGoGoV1) GetFieldA() string {
	if m != nil {
		return m.FieldA
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldB() string {
	if m != nil {
		return m.FieldB
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldC() string {
	if m != nil {
		return m.FieldC
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldD() string {
	if m != nil {
		return m.FieldD
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldE() string {
	if m != nil {
		return m.FieldE
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldF() string {
	if m != nil {
		return m.FieldF
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFielG() float64 {
	if m != nil {
		return m.FielG
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldH() float64 {
	if m != nil {
		return m.FieldH
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldI() float64 {
	if m != nil {
		return m.FieldI
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldJ() float64 {
	if m != nil {
		return m.FieldJ
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldK() float64 {
	if m != nil {
		return m.FieldK
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldL() float64 {
	if m != nil {
		return m.FieldL
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldM() string {
	if m != nil {
		return m.FieldM
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldN() string {
	if m != nil {
		return m.FieldN
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldO() string {
	if m != nil {
		return m.FieldO
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldP() string {
	if m != nil {
		return m.FieldP
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldQ() int64 {
	if m != nil {
		return m.FieldQ
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldR() int64 {
	if m != nil {
		return m.FieldR
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldS() int64 {
	if m != nil {
		return m.FieldS
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldT() int64 {
	if m != nil {
		return m.FieldT
	}
	return 0
}

func (m *NestedRandomGoGoV1) GetFieldU() string {
	if m != nil {
		return m.FieldU
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldV() string {
	if m != nil {
		return m.FieldV
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldW() string {
	if m != nil {
		return m.FieldW
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldX() string {
	if m != nil {
		return m.FieldX
	}
	return ""
}

func (m *NestedRandomGoGoV1) GetFieldY() bool {
	if m != nil {
		return m.FieldY
	}
	return false
}

func (m *NestedRandomGoGoV1) GetFieldZ() bool {
	if m != nil {
		return m.FieldZ
	}
	return false
}

func init() {
	proto.RegisterEnum("protobench.TypeGoGoV1", TypeGoGoV1_name, TypeGoGoV1_value)
	proto.RegisterType((*GogoV1)(nil), "protobench.GogoV1")
	proto.RegisterType((*AddressGoGoV1)(nil), "protobench.AddressGoGoV1")
	proto.RegisterType((*RandomGoGoV1)(nil), "protobench.RandomGoGoV1")
	proto.RegisterType((*NestedRandomGoGoV1)(nil), "protobench.NestedRandomGoGoV1")
}

func init() { proto.RegisterFile("structdef-gogo-v1.proto", fileDescriptor_b9d837b81e69b7b4) }

var fileDescriptor_b9d837b81e69b7b4 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x4d, 0x4f, 0x1a, 0x41,
	0x18, 0xc7, 0x19, 0x11, 0x64, 0x47, 0xb4, 0x74, 0x6a, 0x71, 0xb4, 0x09, 0x21, 0x9c, 0x88, 0x89,
	0x58, 0xf4, 0xd8, 0x93, 0xbc, 0x8a, 0x2f, 0x40, 0x17, 0xc4, 0x97, 0x0b, 0x01, 0x76, 0x04, 0x12,
	0xd8, 0x21, 0xbb, 0x8b, 0x29, 0xd7, 0x7e, 0x82, 0x7e, 0x88, 0x7e, 0x91, 0xde, 0x7a, 0xf4, 0xd0,
	0x43, 0x8f, 0x8d, 0x7e, 0x91, 0x66, 0x67, 0x77, 0x1f, 0xc6, 0xb6, 0x93, 0x5e, 0x7a, 0xe8, 0xc9,
	0xf9, 0xff, 0x9e, 0x67, 0x99, 0x67, 0x67, 0x7e, 0x1b, 0xf1, 0xb6, 0xed, 0x58, 0xf3, 0x81, 0x63,
	0xb0, 0xbb, 0xfd, 0x21, 0x1f, 0xf2, 0xfd, 0xfb, 0x7c, 0x6e, 0x66, 0x71, 0x87, 0x13, 0x2c, 0xfe,
	0xf4, 0x99, 0x39, 0x18, 0x65, 0xbe, 0xad, 0xe0, 0x68, 0x95, 0x0f, 0x79, 0x27, 0x4f, 0x08, 0x5e,
	0x35, 0x7b, 0x53, 0x46, 0x51, 0x1a, 0x65, 0x35, 0x5d, 0xac, 0xc9, 0x2e, 0x8e, 0xf5, 0xc7, 0x96,
	0x33, 0x2a, 0xf5, 0x16, 0x74, 0x25, 0x8d, 0xb2, 0x61, 0x1d, 0x32, 0xd9, 0xc2, 0x91, 0xd9, 0x88,
	0x9b, 0x8c, 0x86, 0xc5, 0x03, 0x5e, 0x70, 0x9f, 0xb0, 0xc7, 0xfd, 0xc9, 0xd8, 0x1c, 0xda, 0x74,
	0x35, 0x8d, 0xb2, 0x11, 0x1d, 0x32, 0x49, 0xe2, 0xa8, 0x3d, 0xe3, 0x73, 0x9b, 0xd1, 0x48, 0x1a,
	0x65, 0x63, 0xba, 0x9f, 0xdc, 0x5f, 0x9a, 0x72, 0x93, 0x2d, 0x68, 0x34, 0x8d, 0xb2, 0x48, 0xf7,
	0x02, 0xd9, 0xc3, 0xab, 0xce, 0x62, 0xc6, 0xe8, 0x5a, 0x1a, 0x65, 0x37, 0x0f, 0x93, 0xb9, 0xe5,
	0xd4, 0xb9, 0xf6, 0x62, 0xc6, 0xaa, 0xbc, 0xca, 0x3b, 0x79, 0x5d, 0xf4, 0x90, 0x1d, 0xbc, 0x76,
	0xdf, 0x9b, 0xcc, 0x59, 0xd7, 0xa6, 0x31, 0x77, 0x9a, 0x93, 0x90, 0x1e, 0x15, 0xa0, 0xb5, 0x2c,
	0x8d, 0xa9, 0xe6, 0xce, 0x03, 0xa5, 0xda, 0xb2, 0x64, 0x50, 0xec, 0xee, 0x0c, 0xa5, 0x12, 0x39,
	0xc2, 0x6b, 0x3d, 0xc3, 0xb0, 0x98, 0x6d, 0xd3, 0xf5, 0x34, 0xca, 0xae, 0x1f, 0xee, 0xc8, 0xfb,
	0x1f, 0x7b, 0x25, 0x7f, 0x84, 0xa0, 0xb3, 0x10, 0xc3, 0xde, 0xe3, 0x76, 0xe6, 0x33, 0xc2, 0x1b,
	0xcf, 0x9a, 0xc4, 0xbb, 0x3b, 0x16, 0x63, 0x8e, 0x7f, 0xbe, 0x7e, 0x72, 0xb9, 0x39, 0x9f, 0xf6,
	0x99, 0x25, 0xce, 0x37, 0xa2, 0xfb, 0x89, 0xbc, 0xc1, 0xda, 0x8c, 0xdb, 0x4e, 0x77, 0xc0, 0x0d,
	0xef, 0x84, 0x23, 0x7a, 0xcc, 0x05, 0x45, 0x6e, 0x88, 0x03, 0xbb, 0x9b, 0x70, 0x6e, 0xf9, 0x27,
	0xec, 0x05, 0xf2, 0x16, 0x47, 0xad, 0x9e, 0x69, 0xf0, 0xa9, 0x38, 0xde, 0xf5, 0x43, 0x2a, 0x8f,
	0xac, 0x8b, 0x8a, 0x3f, 0xb1, 0xdf, 0x97, 0xf9, 0x12, 0xc1, 0x71, 0xb9, 0xe0, 0x4e, 0x53, 0x19,
	0xb3, 0x89, 0x71, 0x1c, 0x4c, 0xe9, 0x25, 0xe0, 0x05, 0x31, 0x65, 0xc0, 0x0b, 0xc0, 0x8b, 0xbe,
	0x04, 0x7e, 0x02, 0x5e, 0x12, 0x13, 0x06, 0xbc, 0x04, 0xbc, 0x2c, 0x46, 0x0c, 0x78, 0x19, 0x78,
	0x45, 0x28, 0x10, 0xf0, 0x8a, 0xfb, 0xa2, 0xee, 0xaa, 0x2a, 0x24, 0xd0, 0x74, 0x2f, 0x40, 0xf7,
	0x89, 0x77, 0xd9, 0x7e, 0xf7, 0x09, 0xf0, 0x9a, 0xb8, 0xe9, 0x80, 0xd7, 0x80, 0x9f, 0x8a, 0x6b,
	0x0e, 0xf8, 0x29, 0xf0, 0x33, 0x71, 0xc7, 0x61, 0x9f, 0x9f, 0x01, 0x3f, 0xa7, 0x71, 0x89, 0x9f,
	0x03, 0xbf, 0xa0, 0x1b, 0x12, 0xbf, 0x00, 0x5e, 0xa7, 0x9b, 0x12, 0xaf, 0x03, 0x6f, 0xd0, 0x17,
	0xd2, 0xbe, 0x0d, 0xe0, 0x4d, 0x9a, 0x90, 0x78, 0x13, 0xf8, 0x7b, 0xfa, 0xd2, 0x73, 0xc1, 0x4b,
	0xc0, 0x75, 0x4a, 0xa4, 0x7e, 0x1d, 0x78, 0x8b, 0xbe, 0x92, 0x78, 0x0b, 0x78, 0x9b, 0x6e, 0x49,
	0xbc, 0x0d, 0xfc, 0x92, 0xbe, 0x96, 0x7e, 0xff, 0x12, 0x78, 0x87, 0x26, 0x25, 0xde, 0x01, 0x7e,
	0x45, 0xb7, 0x25, 0x7e, 0x05, 0xfc, 0x9a, 0x52, 0x89, 0x5f, 0x03, 0xbf, 0xa1, 0x3b, 0xd2, 0xbe,
	0x37, 0xc0, 0x6f, 0xe9, 0xae, 0xf7, 0xdd, 0x7b, 0x89, 0x14, 0xf1, 0x86, 0xc9, 0x6c, 0x87, 0x19,
	0x5d, 0xdf, 0xdb, 0x8c, 0xf0, 0x36, 0x25, 0x7b, 0x5b, 0x17, 0x0d, 0xcf, 0xec, 0x8d, 0x9b, 0x12,
	0xcb, 0x7c, 0x8c, 0x60, 0xf2, 0x7b, 0xd3, 0xff, 0x6d, 0x32, 0xfa, 0xb3, 0xc9, 0x48, 0x61, 0x32,
	0x52, 0x98, 0x8c, 0x14, 0x26, 0x23, 0x85, 0xc9, 0x48, 0x61, 0xb2, 0xa6, 0x30, 0x59, 0xfb, 0x47,
	0x26, 0x87, 0x15, 0x26, 0x87, 0x15, 0x26, 0x87, 0x15, 0x26, 0x87, 0x15, 0x26, 0x6b, 0x0a, 0x93,
	0x35, 0x85, 0xc9, 0x9a, 0xc2, 0x64, 0x4d, 0x61, 0x72, 0xec, 0x6f, 0x26, 0xef, 0x9d, 0x63, 0xbc,
	0xfc, 0x9f, 0x44, 0x76, 0x71, 0xb2, 0x7d, 0xd3, 0x2c, 0x57, 0x1b, 0xd5, 0x46, 0x27, 0xdf, 0xbd,
	0xac, 0xb7, 0x9a, 0xe5, 0x62, 0xad, 0x52, 0x2b, 0x97, 0x12, 0x21, 0x92, 0xc0, 0x71, 0xa9, 0xa6,
	0x27, 0xd0, 0x2f, 0xa4, 0x95, 0x58, 0x29, 0x94, 0xbe, 0x3e, 0xa6, 0xd0, 0xc3, 0x63, 0x0a, 0xfd,
	0x78, 0x4c, 0xa1, 0x4f, 0x4f, 0xa9, 0xd0, 0xc3, 0x53, 0x2a, 0xf4, 0xfd, 0x29, 0x15, 0xba, 0xdd,
	0x1b, 0x8e, 0x9d, 0xd1, 0xbc, 0x9f, 0x1b, 0xf0, 0xe9, 0x41, 0x6f, 0xc2, 0x3e, 0xd8, 0x23, 0x67,
	0x6c, 0x1e, 0x2c, 0x3f, 0x97, 0x77, 0xcb, 0x65, 0x3f, 0x2a, 0xd6, 0x47, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x3c, 0xbc, 0x75, 0x8b, 0x08, 0x08, 0x00, 0x00,
}

func (m *GogoV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GogoV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GogoV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructdefGogoV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Values != nil {
		{
			size := m.Values.Size()
			i -= size
			if _, err := m.Values.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.Money != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Money))))
		i--
		dAtA[i] = 0x31
	}
	if m.Spouse {
		i--
		if m.Spouse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Siblings != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.Siblings))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BirthDay != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.BirthDay))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GogoV1_ValueS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GogoV1_ValueS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ValueS)
	copy(dAtA[i:], m.ValueS)
	i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.ValueS)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *GogoV1_ValueI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GogoV1_ValueI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.ValueI))
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *GogoV1_ValueD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GogoV1_ValueD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ValueD))))
	i--
	dAtA[i] = 0x51
	return len(dAtA) - i, nil
}
func (m *AddressGoGoV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressGoGoV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressGoGoV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructdefGogoV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Floor != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.Floor))
		i--
		dAtA[i] = 0x20
	}
	if m.PostCode != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.PostCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Number != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RandomGoGoV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomGoGoV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandomGoGoV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NestedRandom != nil {
		{
			size, err := m.NestedRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructdefGogoV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.FieldZ {
		i--
		if m.FieldZ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.FieldY) > 0 {
		i -= len(m.FieldY)
		copy(dAtA[i:], m.FieldY)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldY)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.FieldX != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldX))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.FieldW != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldW))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.FieldV != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldV))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.FieldU != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldU))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.FieldT) > 0 {
		i -= len(m.FieldT)
		copy(dAtA[i:], m.FieldT)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldT)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.FieldS) > 0 {
		i -= len(m.FieldS)
		copy(dAtA[i:], m.FieldS)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldS)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.FieldR) > 0 {
		i -= len(m.FieldR)
		copy(dAtA[i:], m.FieldR)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldR)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.FieldQ != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldQ))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.FieldP) > 0 {
		i -= len(m.FieldP)
		copy(dAtA[i:], m.FieldP)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldP)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.FieldO) > 0 {
		i -= len(m.FieldO)
		copy(dAtA[i:], m.FieldO)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldO)))
		i--
		dAtA[i] = 0x7a
	}
	if m.FieldN != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldN))
		i--
		dAtA[i] = 0x70
	}
	if m.FieldM != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldM))
		i--
		dAtA[i] = 0x68
	}
	if m.FieldL != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldL))
		i--
		dAtA[i] = 0x60
	}
	if m.FieldK != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldK))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FieldJ) > 0 {
		i -= len(m.FieldJ)
		copy(dAtA[i:], m.FieldJ)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldJ)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FieldI) > 0 {
		i -= len(m.FieldI)
		copy(dAtA[i:], m.FieldI)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldI)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FieldH) > 0 {
		i -= len(m.FieldH)
		copy(dAtA[i:], m.FieldH)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldH)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FielG) > 0 {
		i -= len(m.FielG)
		copy(dAtA[i:], m.FielG)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FielG)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FieldF) > 0 {
		i -= len(m.FieldF)
		copy(dAtA[i:], m.FieldF)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldF)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FieldE) > 0 {
		i -= len(m.FieldE)
		copy(dAtA[i:], m.FieldE)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldE)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldD) > 0 {
		i -= len(m.FieldD)
		copy(dAtA[i:], m.FieldD)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldD)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldC) > 0 {
		i -= len(m.FieldC)
		copy(dAtA[i:], m.FieldC)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldC)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldB) > 0 {
		i -= len(m.FieldB)
		copy(dAtA[i:], m.FieldB)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldB)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FieldA) > 0 {
		i -= len(m.FieldA)
		copy(dAtA[i:], m.FieldA)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NestedRandomGoGoV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedRandomGoGoV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedRandomGoGoV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FieldZ {
		i--
		if m.FieldZ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.FieldY {
		i--
		if m.FieldY {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.FieldX) > 0 {
		i -= len(m.FieldX)
		copy(dAtA[i:], m.FieldX)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldX)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.FieldW) > 0 {
		i -= len(m.FieldW)
		copy(dAtA[i:], m.FieldW)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldW)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.FieldV) > 0 {
		i -= len(m.FieldV)
		copy(dAtA[i:], m.FieldV)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldV)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.FieldU) > 0 {
		i -= len(m.FieldU)
		copy(dAtA[i:], m.FieldU)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldU)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.FieldT != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldT))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.FieldS != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldS))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FieldR != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldR))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.FieldQ != 0 {
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(m.FieldQ))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.FieldP) > 0 {
		i -= len(m.FieldP)
		copy(dAtA[i:], m.FieldP)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldP)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.FieldO) > 0 {
		i -= len(m.FieldO)
		copy(dAtA[i:], m.FieldO)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldO)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FieldN) > 0 {
		i -= len(m.FieldN)
		copy(dAtA[i:], m.FieldN)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldN)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.FieldM) > 0 {
		i -= len(m.FieldM)
		copy(dAtA[i:], m.FieldM)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldM)))
		i--
		dAtA[i] = 0x6a
	}
	if m.FieldL != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldL))))
		i--
		dAtA[i] = 0x61
	}
	if m.FieldK != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldK))))
		i--
		dAtA[i] = 0x59
	}
	if m.FieldJ != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldJ))))
		i--
		dAtA[i] = 0x51
	}
	if m.FieldI != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldI))))
		i--
		dAtA[i] = 0x49
	}
	if m.FieldH != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldH))))
		i--
		dAtA[i] = 0x41
	}
	if m.FielG != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FielG))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.FieldF) > 0 {
		i -= len(m.FieldF)
		copy(dAtA[i:], m.FieldF)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldF)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FieldE) > 0 {
		i -= len(m.FieldE)
		copy(dAtA[i:], m.FieldE)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldE)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldD) > 0 {
		i -= len(m.FieldD)
		copy(dAtA[i:], m.FieldD)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldD)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldC) > 0 {
		i -= len(m.FieldC)
		copy(dAtA[i:], m.FieldC)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldC)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldB) > 0 {
		i -= len(m.FieldB)
		copy(dAtA[i:], m.FieldB)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldB)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FieldA) > 0 {
		i -= len(m.FieldA)
		copy(dAtA[i:], m.FieldA)
		i = encodeVarintStructdefGogoV1(dAtA, i, uint64(len(m.FieldA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStructdefGogoV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovStructdefGogoV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GogoV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.BirthDay != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.BirthDay))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.Siblings != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.Siblings))
	}
	if m.Spouse {
		n += 2
	}
	if m.Money != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.Type))
	}
	if m.Values != nil {
		n += m.Values.Size()
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	return n
}

func (m *GogoV1_ValueS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueS)
	n += 1 + l + sovStructdefGogoV1(uint64(l))
	return n
}
func (m *GogoV1_ValueI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovStructdefGogoV1(uint64(m.ValueI))
	return n
}
func (m *GogoV1_ValueD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *AddressGoGoV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.Number))
	}
	if m.PostCode != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.PostCode))
	}
	if m.Floor != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.Floor))
	}
	if m.Random != nil {
		l = m.Random.Size()
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	return n
}

func (m *RandomGoGoV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldA)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldB)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldC)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldD)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldE)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldF)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FielG)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldH)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldI)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldJ)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldK != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.FieldK))
	}
	if m.FieldL != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.FieldL))
	}
	if m.FieldM != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.FieldM))
	}
	if m.FieldN != 0 {
		n += 1 + sovStructdefGogoV1(uint64(m.FieldN))
	}
	l = len(m.FieldO)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldP)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldQ != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldQ))
	}
	l = len(m.FieldR)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldS)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldT)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldU != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldU))
	}
	if m.FieldV != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldV))
	}
	if m.FieldW != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldW))
	}
	if m.FieldX != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldX))
	}
	l = len(m.FieldY)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldZ {
		n += 3
	}
	if m.NestedRandom != nil {
		l = m.NestedRandom.Size()
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	return n
}

func (m *NestedRandomGoGoV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldA)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldB)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldC)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldD)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldE)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldF)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FielG != 0 {
		n += 9
	}
	if m.FieldH != 0 {
		n += 9
	}
	if m.FieldI != 0 {
		n += 9
	}
	if m.FieldJ != 0 {
		n += 9
	}
	if m.FieldK != 0 {
		n += 9
	}
	if m.FieldL != 0 {
		n += 9
	}
	l = len(m.FieldM)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldN)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldO)
	if l > 0 {
		n += 1 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldP)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldQ != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldQ))
	}
	if m.FieldR != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldR))
	}
	if m.FieldS != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldS))
	}
	if m.FieldT != 0 {
		n += 2 + sovStructdefGogoV1(uint64(m.FieldT))
	}
	l = len(m.FieldU)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldV)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldW)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	l = len(m.FieldX)
	if l > 0 {
		n += 2 + l + sovStructdefGogoV1(uint64(l))
	}
	if m.FieldY {
		n += 3
	}
	if m.FieldZ {
		n += 3
	}
	return n
}

func sovStructdefGogoV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStructdefGogoV1(x uint64) (n int) {
	return sovStructdefGogoV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GogoV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructdefGogoV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GogoV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GogoV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Siblings", wireType)
			}
			m.Siblings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Siblings |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spouse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spouse = bool(v != 0)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Money = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TypeGoGoV1(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = &GogoV1_ValueS{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueI", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Values = &GogoV1_ValueI{v}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueD", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Values = &GogoV1_ValueD{float64(math.Float64frombits(v))}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &AddressGoGoV1{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructdefGogoV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressGoGoV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructdefGogoV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressGoGoV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressGoGoV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCode", wireType)
			}
			m.PostCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Random == nil {
				m.Random = &RandomGoGoV1{}
			}
			if err := m.Random.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructdefGogoV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomGoGoV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructdefGogoV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomGoGoV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomGoGoV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldF", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldF = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FielG", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FielG = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldH", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldH = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldJ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldJ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldK", wireType)
			}
			m.FieldK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldK |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldL", wireType)
			}
			m.FieldL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldM", wireType)
			}
			m.FieldM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldM |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldN", wireType)
			}
			m.FieldN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldN |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldO", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldO = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldQ", wireType)
			}
			m.FieldQ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldQ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldT = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldU", wireType)
			}
			m.FieldU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldU |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldV", wireType)
			}
			m.FieldV = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldV |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldW", wireType)
			}
			m.FieldW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldW |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldX", wireType)
			}
			m.FieldX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldY", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldY = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldZ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FieldZ = bool(v != 0)
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NestedRandom == nil {
				m.NestedRandom = &NestedRandomGoGoV1{}
			}
			if err := m.NestedRandom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructdefGogoV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedRandomGoGoV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructdefGogoV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedRandomGoGoV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedRandomGoGoV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldF", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldF = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FielG", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FielG = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldH", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldH = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldI = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldJ", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldJ = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldK", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldK = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldL", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldL = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldO", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldO = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldQ", wireType)
			}
			m.FieldQ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldQ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldR", wireType)
			}
			m.FieldR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldR |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldS", wireType)
			}
			m.FieldS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldT", wireType)
			}
			m.FieldT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldT |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldU = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldW", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldW = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldY", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FieldY = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldZ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FieldZ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructdefGogoV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructdefGogoV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStructdefGogoV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStructdefGogoV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructdefGogoV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStructdefGogoV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStructdefGogoV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStructdefGogoV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStructdefGogoV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStructdefGogoV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStructdefGogoV1 = fmt.Errorf("proto: unexpected end of group")
)
